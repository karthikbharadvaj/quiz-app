Complete delete.test.ts

I will provide a comprehensive delete.test.ts file that includes:

1. Data Insertion: Inserting test data into the database for different user types (REPRESENTATIVE, AGENT, BENEFICIARY1, BENEFICIARY2, BENEFICIARY3, BENEFICIARY4).


2. Data Cleanup: Ensuring the database is cleaned before and after tests to prevent data conflicts.


3. Test Cases: Covering scenarios for deleting REPRESENTATIVE and AGENT roles while verifying that BENEFICIARY data remains unaffected.


4. Helper Functions: Using helper functions for consistent request handling and data manipulation.



delete.test.ts

import request from 'supertest';
import { server } from '../app';
import { getDbClient } from '../config/dbClient';
import { referenceNumberManager } from '../utils/referenceNumberManager';

// Mock Data
const mockIdentificationData = {
  name: 'John Doe',
  dateOfBirth: '1990-01-01',
  address: '123 Main St, Tokyo, Japan',
  identificationNumber: 'ID1234567890',
};

// Database Client
let dbClient: any;

// Helper Functions

/**
 * Sends a DELETE request to remove identification data for a given user type.
 */
const sendDeleteRequest = ({
  userUid = referenceNumberManager.userUid(),
  referenceNumber = referenceNumberManager.referenceNumber(),
  userType,
} = {}) =>
  request(server)
    .delete(`/applications/identification-data`)
    .set('user-uid', userUid)
    .send({ referenceNumber, userType });

/**
 * Inserts mock identification data for a specified user type.
 */
const insertUserIdentificationData = async (userType: string) => {
  const referenceNumber = referenceNumberManager.referenceNumber();

  await dbClient.execute(
    `INSERT INTO identification_table (reference_number, user_type, saved_data, created_at, updated_at)
     VALUES ($1, $2, $3, CURRENT_TIMESTAMP, NULL)`,
    [referenceNumber, userType, JSON.stringify(mockIdentificationData)]
  );
};

/**
 * Inserts data for all user types: 'REPRESENTATIVE', 'AGENT', 'BENEFICIARY1', 'BENEFICIARY2', 'BENEFICIARY3', 'BENEFICIARY4'.
 */
const insertAllTestData = async () => {
  await insertUserIdentificationData('REPRESENTATIVE');
  await insertUserIdentificationData('AGENT');
  await insertUserIdentificationData('BENEFICIARY1');
  await insertUserIdentificationData('BENEFICIARY2');
  await insertUserIdentificationData('BENEFICIARY3');
  await insertUserIdentificationData('BENEFICIARY4');
};

/**
 * Deletes all user identification data from the database.
 */
const deleteUserIdentificationData = async () => {
  const referenceNumber = referenceNumberManager.referenceNumber();
  await dbClient.execute(`DELETE FROM identification_table WHERE reference_number = $1`, [referenceNumber]);
};

/**
 * Fetches all user identification data from the database.
 */
const getUserIdentificationData = async () => {
  const referenceNumber = referenceNumberManager.referenceNumber();
  const result = await dbClient.execute(
    `SELECT reference_number as "referenceNumber", user_type as "userType", saved_data as "savedData",
     created_at as "createdAt", updated_at as "updatedAt"
     FROM identification_table WHERE reference_number = $1 ORDER BY user_type ASC`,
    [referenceNumber]
  );
  return result.rows;
};

// Test Suite
beforeAll(async () => {
  dbClient = await getDbClient();
  await referenceNumberManager.initialize(dbClient);
});

beforeEach(async () => {
  // Clean up existing data and insert fresh test data
  await deleteUserIdentificationData();
  await insertAllTestData();
});

afterAll(async () => {
  await deleteUserIdentificationData();
  await referenceNumberManager.cleanup();
  await dbClient.close();
});

describe('DELETE /applications/identification-data', () => {
  describe('Agent and Representative Data Deletion', () => {
    it.each([
      { title: '代表者', role: 'REPRESENTATIVE' },
      { title: '代理人', role: 'AGENT' },
    ])('$titleのデータが正常に削除されること', async ({ role }) => {
      // Send DELETE request for the specified role
      const { status } = await sendDeleteRequest({ userType: role });

      // Verify that the deletion was successful
      expect(status).toBe(204);

      // Fetch data from the database and verify that the specified role is deleted
      const dbData = await getUserIdentificationData();
      const deletedData = dbData.filter((data) => data.userType === role);

      expect(deletedData).toEqual([]);
    });
  });

  describe('Beneficiary Data Preservation', () => {
    it.each([
      { title: '実質的支配者1', role: 'BENEFICIARY1' },
      { title: '実質的支配者2', role: 'BENEFICIARY2' },
      { title: '実質的支配者3', role: 'BENEFICIARY3' },
      { title: '実質的支配者4', role: 'BENEFICIARY4' },
    ])('$titleのデータが削除されずに保存されること', async ({ role }) => {
      // Send DELETE request for a non-beneficiary role (e.g., AGENT)
      await sendDeleteRequest({ userType: 'AGENT' });

      // Fetch data from the database
      const dbData = await getUserIdentificationData();

      // Verify that the beneficiary data is still present
      const beneficiaryData = dbData.filter((data) => data.userType === role);

      expect(beneficiaryData).toEqual([
        {
          referenceNumber: referenceNumberManager.referenceNumber(),
          userType: role,
          savedData: mockIdentificationData,
          createdAt: expect.anything(),
          updatedAt: null,
        },
      ]);
    });
  });
});

Explanation

1. Data Insertion:

The insertAllTestData helper function inserts mock data for all user roles (REPRESENTATIVE, AGENT, BENEFICIARY1, BENEFICIARY2, BENEFICIARY3, BENEFICIARY4).

The insertUserIdentificationData helper function handles individual data insertion based on the role.



2. Data Cleanup:

The deleteUserIdentificationData function removes all test data before and after each test run to ensure data isolation.



3. Test Cases:

Agent and Representative Data Deletion:

Uses it.each to test both REPRESENTATIVE and AGENT.

Verifies that the data for these roles is deleted from the database.


Beneficiary Data Preservation:

Uses it.each to test all BENEFICIARY roles.

Verifies that the data for these roles remains unchanged in the database after deleting AGENT data.





Running the Tests

To run the test suite, use:

jest delete.test.ts --coverage

Summary

This test file:

Handles data setup, insertion, and cleanup within a single file.

Uses helper functions for consistent and reusable database operations.

Tests both deletion and preservation scenarios with clear assertions.

Ensures isolation and reliability of tests by resetting data before and after each test case.


This approach provides a comprehensive, maintainable, and efficient testing strategy aligned with best practices.


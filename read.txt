import request from 'supertest';
import { server } from '../app';
import { getDbClient } from '../config/dbClient';
import { referenceNumberManager } from '../utils/referenceNumberManager';

// Type Definitions
type IdentificationSavedData = {
  identificationStatus: string;
};

let dbClient: DbClient;
const testReferenceNumber = '24071650001';
const testUserType = 'REPRESENTATIVE';
const testSavedData: IdentificationSavedData = { identificationStatus: 'verified' };

// Helper Functionsimport request from 'supertest';
import { server } from '../app';
import { getDbClient } from '../config/dbClient';
import { referenceNumberManager } from '../utils/referenceNumberManager';

// Type Definitions
type IdentificationSavedData = {
  identificationStatus: string;
};

let dbClient: any;
const testReferenceNumber = '24071650001';
const testUserUid = 'userUid1';
const testSavedData: IdentificationSavedData = { identificationStatus: 'verified' };

// Helper Functions

const insertUserIdentificationData = async (referenceNumber: string, userType: string, savedData: IdentificationSavedData): Promise<void> => {
  await dbClient.execute(
    `INSERT INTO identification (reference_number, user_type, saved_data) VALUES ($1, $2, $3)`,
    [referenceNumber, userType, JSON.stringify(savedData)]
  );
};

const insertApplicationData = async (referenceNumber: string, isValid: boolean): Promise<void> => {
  await dbClient.execute(
    `INSERT INTO application (reference_number, is_valid) VALUES ($1, $2)`,
    [referenceNumber, isValid]
  );
};

const insertJpkiIdentificationData = async (referenceNumber: string, userTypeNum: string, userType: string, savedData: IdentificationSavedData): Promise<void> => {
  await dbClient.execute(
    `INSERT INTO jpki_identification (reference_number, user_type_num, user_type, saved_data) VALUES ($1, $2, $3, $4)`,
    [referenceNumber, userTypeNum, userType, JSON.stringify(savedData)]
  );
};

const deleteUserIdentificationData = async (referenceNumber: string): Promise<void> => {
  await dbClient.execute(`DELETE FROM identification WHERE reference_number = $1`, [referenceNumber]);
};

const deleteApplicationData = async (referenceNumber: string): Promise<void> => {
  await dbClient.execute(`DELETE FROM application WHERE reference_number = $1`, [referenceNumber]);
};

const deleteJpkiIdentificationData = async (referenceNumber: string): Promise<void> => {
  await dbClient.execute(`DELETE FROM jpki_identification WHERE reference_number = $1`, [referenceNumber]);
};

// Setup and Teardown

beforeAll(async () => {
  dbClient = await getDbClient();
  await referenceNumberManager.initialize(dbClient);
});

beforeEach(async () => {
  await insertUserIdentificationData(testReferenceNumber, 'REPRESENTATIVE', testSavedData);
  await insertApplicationData(testReferenceNumber, true);
  await insertJpkiIdentificationData(testReferenceNumber, '1', 'REPRESENTATIVE', testSavedData);
});

afterEach(async () => {
  await deleteUserIdentificationData(testReferenceNumber);
  await deleteApplicationData(testReferenceNumber);
  await deleteJpkiIdentificationData(testReferenceNumber);
});

afterAll(async () => {
  await referenceNumberManager.cleanup();
  await dbClient.close();
});

// Helper Function for Sending Requests

const sendDeleteRequest = (userUid: string = testUserUid) =>
  request(server)
    .delete(`/applications/identification-data`)
    .set('user-uid', userUid);

// Test Suite

describe('DELETE /applications/identification-data', () => {
  describe('Normal Cases', () => {
    it('returns 204 when identification data is deleted successfully based on user-uid', async () => {
      const response = await sendDeleteRequest();

      expect(response.status).toBe(204);
      expect(response.body).toEqual({});

      // Verify that the data has been deleted from the identification table
      const result = await dbClient.execute(`SELECT * FROM identification WHERE reference_number = $1`, [
        testReferenceNumber,
      ]);
      expect(result.rowCount).toBe(0);
    });
  });

  describe('Error Cases', () => {
    it('returns 404 when the reference number derived from user-uid does not exist', async () => {
      const nonExistentUserUid = 'nonExistentUserUid';
      const response = await sendDeleteRequest(nonExistentUserUid);

      expect(response.status).toBe(404);
      expect(response.body.error).toBe('Invalid reference number');
    });

    it('returns 500 when deletion from IdentificationData fails', async () => {
      // Corrupt the data to simulate a failure
      await dbClient.execute(`UPDATE identification SET saved_data = NULL WHERE reference_number = $1`, [testReferenceNumber]);

      const response = await sendDeleteRequest();

      expect(response.status).toBe(500);
      expect(response.body.error).toBe('Internal Server Error');
    });

    it('returns 500 when update operation in OpenAccountApplicationRepository fails', async () => {
      // Corrupt the application data to trigger a failure
      await dbClient.execute(`UPDATE application SET is_valid = NULL WHERE reference_number = $1`, [testReferenceNumber]);

      const response = await sendDeleteRequest();

      expect(response.status).toBe(500);
      expect(response.body.error).toBe('Internal Server Error');
    });
  });
});


const insertUserIdentificationData = async (referenceNumber: string, userType: string, savedData: IdentificationSavedData): Promise<void> => {
  await dbClient.execute(
    `INSERT INTO identification (reference_number, user_type, saved_data) VALUES ($1, $2, $3)`,
    [referenceNumber, userType, JSON.stringify(savedData)]
  );
};

const insertApplicationData = async (referenceNumber: string, isValid: boolean): Promise<void> => {
  await dbClient.execute(
    `INSERT INTO application (reference_number, is_valid) VALUES ($1, $2)`,
    [referenceNumber, isValid]
  );
};

const insertJpkiIdentificationData = async (referenceNumber: string, userTypeNum: string, userType: string, savedData: IdentificationSavedData): Promise<void> => {
  await dbClient.execute(
    `INSERT INTO jpki_identification (reference_number, user_type_num, user_type, saved_data) VALUES ($1, $2, $3, $4)`,
    [referenceNumber, userTypeNum, userType, JSON.stringify(savedData)]
  );
};

const deleteUserIdentificationData = async (referenceNumber: string): Promise<void> => {
  await dbClient.execute(`DELETE FROM identification WHERE reference_number = $1`, [referenceNumber]);
};

const deleteApplicationData = async (referenceNumber: string): Promise<void> => {
  await dbClient.execute(`DELETE FROM application WHERE reference_number = $1`, [referenceNumber]);
};

const deleteJpkiIdentificationData = async (referenceNumber: string): Promise<void> => {
  await dbClient.execute(`DELETE FROM jpki_identification WHERE reference_number = $1`, [referenceNumber]);
};

// Setup and Teardown

beforeAll(async () => {
  dbClient = await getDbClient();
  await referenceNumberManager.initialize(dbClient);
});

beforeEach(async () => {
  await insertUserIdentificationData(testReferenceNumber, testUserType, testSavedData);
  await insertApplicationData(testReferenceNumber, true);
  await insertJpkiIdentificationData(testReferenceNumber, '1', testUserType, testSavedData);
});

afterEach(async () => {
  await deleteUserIdentificationData(testReferenceNumber);
  await deleteApplicationData(testReferenceNumber);
  await deleteJpkiIdentificationData(testReferenceNumber);
});

afterAll(async () => {
  await referenceNumberManager.cleanup();
  await dbClient.close();
});

// Helper Function for Sending Requests

const sendDeleteRequest = (referenceNumber: string = testReferenceNumber, userType: string = testUserType) =>
  request(server)
    .delete(`/applications/identification-data`)
    .set('user-uid', referenceNumberManager.userUid())
    .send({ referenceNumber, userType });

// Test Suite

describe('DELETE /applications/identification-data', () => {
  describe('Normal Cases', () => {
    it('returns 204 when identification data for REPRESENTATIVE is deleted successfully', async () => {
      const response = await sendDeleteRequest();

      if (response.status !== 204) {
        throw new Error(`Expected status 204, but got ${response.status}`);
      }

      const result = await dbClient.execute(`SELECT * FROM identification WHERE reference_number = $1`, [testReferenceNumber]);
      if (result.rowCount !== 0) {
        throw new Error('Expected identification data to be deleted');
      }
    });
  });

  describe('Error Cases', () => {
    it('returns 404 when the reference number does not exist', async () => {
      const response = await sendDeleteRequest('non-existent-reference');

      if (response.status !== 404) {
        throw new Error(`Expected status 404, but got ${response.status}`);
      }

      if (response.body.error !== 'Invalid reference number') {
        throw new Error(`Expected error 'Invalid reference number', but got ${response.body.error}`);
      }
    });

    it('returns 500 when deletion from IdentificationDataRepository fails', async () => {
      await dbClient.execute(`UPDATE identification SET saved_data = NULL WHERE reference_number = $1`, [testReferenceNumber]);

      const response = await sendDeleteRequest();

      if (response.status !== 500) {
        throw new Error(`Expected status 500, but got ${response.status}`);
      }

      if (response.body.error !== 'Internal Server Error') {
        throw new Error(`Expected error 'Internal Server Error', but got ${response.body.error}`);
      }
    });
  });
});

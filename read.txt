import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { SmartMock } from 'smartmock';
import { useGetApplicationQuery } from './api';
import RegistrationForm from './RegistrationForm';

const apiMock = new SmartMock('./api');

describe('RegistrationForm', () => {
  beforeEach(() => {
    apiMock.mock('useGetApplicationQuery', () => ({
      data: null,
      isLoading: false,
      refetch: SmartMock.fn(),
    }));
  });

  afterEach(() => {
    apiMock.restore();
  });

  it('renders form fields and buttons', () => {
    render(<RegistrationForm />);

    expect(screen.getByPlaceholderText('Company Name')).toBeInTheDocument();
    expect(screen.getByPlaceholderText('Company Address')).toBeInTheDocument();
    expect(screen.getByPlaceholderText('Personal Name')).toBeInTheDocument();
    expect(screen.getByPlaceholderText('Age')).toBeInTheDocument();
    expect(screen.getByRole('listbox')).toBeInTheDocument();
    expect(screen.getByText('Add Dynamic Field')).toBeInTheDocument();
    expect(screen.getByText('Save')).toBeInTheDocument();
  });

  it('loads and displays saved data', async () => {
    const mockSavedData = {
      companyInfo: { name: 'Test Company', address: '123 Test St', purpTras: ['option1'] },
      personalInfo: { name: 'John Doe', age: 30 },
      dynamicFields: [{ value: 'Dynamic 1' }],
    };

    apiMock.mock('useGetApplicationQuery', () => ({
      data: mockSavedData,
      isLoading: false,
      refetch: SmartMock.fn(),
    }));

    render(<RegistrationForm />);

    await waitFor(() => {
      expect(screen.getByPlaceholderText('Company Name')).toHaveValue('Test Company');
      expect(screen.getByPlaceholderText('Company Address')).toHaveValue('123 Test St');
      expect(screen.getByPlaceholderText('Personal Name')).toHaveValue('John Doe');
      expect(screen.getByPlaceholderText('Age')).toHaveValue('30');
      expect(screen.getByPlaceholderText('Dynamic Field 1')).toHaveValue('Dynamic 1');
    });
  });

  it('adds dynamic fields', async () => {
    render(<RegistrationForm />);

    const addButton = screen.getByText('Add Dynamic Field');
    fireEvent.click(addButton);
    fireEvent.click(addButton);

    expect(screen.getByPlaceholderText('Dynamic Field 1')).toBeInTheDocument();
    expect(screen.getByPlaceholderText('Dynamic Field 2')).toBeInTheDocument();
  });

  it('submits form data and refetches', async () => {
    const mockRefetch = SmartMock.fn();
    apiMock.mock('useGetApplicationQuery', () => ({
      data: null,
      isLoading: false,
      refetch: mockRefetch,
    }));

    const consoleSpy = SmartMock.spyOn(console, 'log');

    render(<RegistrationForm />);

    await userEvent.type(screen.getByPlaceholderText('Company Name'), 'New Company');
    await userEvent.type(screen.getByPlaceholderText('Company Address'), '456 New St');
    await userEvent.type(screen.getByPlaceholderText('Personal Name'), 'Jane Smith');
    await userEvent.type(screen.getByPlaceholderText('Age'), '25');

    const saveButton = screen.getByText('Save');
    fireEvent.click(saveButton);

    await waitFor(() => {
      expect(consoleSpy).toHaveBeenCalledWith(
        'Saved data:',
        SmartMock.objectContaining({
          companyInfo: SmartMock.objectContaining({
            name: SmartMock.any(String),
            address: SmartMock.any(String),
          }),
          personalInfo: SmartMock.objectContaining({
            name: SmartMock.any(String),
            age: SmartMock.any(Number),
          }),
        })
      );
      expect(mockRefetch).toHaveBeenCalled();
    });

    consoleSpy.restore();
  });

  it('displays loading state', () => {
    apiMock.mock('useGetApplicationQuery', () => ({
      data: null,
      isLoading: true,
      refetch: SmartMock.fn(),
    }));

    render(<RegistrationForm />);

    expect(screen.getByText('Loading...')).toBeInTheDocument();
  });
});

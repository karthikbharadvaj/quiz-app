import { render, fireEvent, waitFor } from '@testing-library/react';
import { SmartMock } from 'smart-mock';
import { configs } from '../configs';
import { ApplyFormData } from '../types';
import { MainForm } from './MainForm';

describe('MainForm', () => {
  const defaultData: ApplyFormData = {
    name: '',
    email: '',
    phone: '',
    address: '',
  };

  const mockData: ApplyFormData = {
    name: 'John Doe',
    email: 'john.doe@example.com',
    phone: '',
    address: '',
  };

  beforeEach(() => {
    resizeScreenSize(1000);
  });

  it('mocking a saved data and verifying consistency', async () => {
    // Mock the API call
    SmartMock.get({
      url: `${configs.network.WEB_APP_PATH}/api/main-form`,
      resStatusCode: 200,
      resBody: mockData,
    });

    // Render the MainForm component
    const { getByLabelText, getByText } = render(<MainForm />);

    // Simulate saving or reloading data
    const saveButton = getByText('Save');
    fireEvent.click(saveButton);

    // Wait for the API call to complete
    await waitFor(() => expect(SmartMock.history.get).toHaveBeenCalledTimes(1));

    // Assert that the API was called
    expect(SmartMock.history.get).toHaveBeenCalledWith(`${configs.network.WEB_APP_PATH}/api/main-form`);

    // Get the rendered data from the screen
    const renderedData = getRenderedData(getByLabelText);

    // Verify that the rendered data is a combination of saved data and default data
    const expectedRenderedData: ApplyFormData = {
      ...defaultData,
      ...mockData,
    };

    expect(renderedData).toEqual(expectedRenderedData);

    // Simulate saving or reloading data again
    fireEvent.click(saveButton);

    // Wait for the API call to complete
    await waitFor(() => expect(SmartMock.history.get).toHaveBeenCalledTimes(2));

    // Assert that the API was called again
    expect(SmartMock.history.get).toHaveBeenCalledTimes(2);
    expect(SmartMock.history.get).toHaveBeenNthCalledWith(2, `${configs.network.WEB_APP_PATH}/api/main-form`);

    // Get the reloaded data from the screen
    const reloadedData = getRenderedData(getByLabelText);

    // Verify that the reloaded data matches the saved data
    expect(reloadedData).toEqual(renderedData);
  });
});

// Helper function to get the rendered data from the screen
function getRenderedData(getByLabelText: (labelText: string) => HTMLElement) {
  const nameInput = getByLabelText('Name') as HTMLInputElement;
  const emailInput = getByLabelText('Email') as HTMLInputElement;
  const phoneInput = getByLabelText('Phone') as HTMLInputElement;
  const addressInput = getByLabelText('Address') as HTMLInputElement;

  return {
    name: nameInput.value,
    email: emailInput.value,
    phone: phoneInput.value,
    address: addressInput.value,
  };
}

Explain

import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { useGetApplicationQuery } from './api';
import RegistrationForm from './RegistrationForm';

// Mock the API hook
jest.mock('./api', () => ({
  useGetApplicationQuery: jest.fn(),
}));

describe('RegistrationForm', () => {
  beforeEach(() => {
    useGetApplicationQuery.mockImplementation(() => ({
      data: null,
      isLoading: false,
      refetch: jest.fn(),
    }));
  });

  test('renders form fields correctly', async () => {
    render(<RegistrationForm />);

    expect(screen.getByPlaceholderText('Company Name')).toBeInTheDocument();
    expect(screen.getByPlaceholderText('Company Address')).toBeInTheDocument();
    expect(screen.getByPlaceholderText('Personal Name')).toBeInTheDocument();
    expect(screen.getByPlaceholderText('Age')).toBeInTheDocument();
    expect(screen.getByRole('listbox')).toBeInTheDocument();
    expect(screen.getByText('Add Dynamic Field')).toBeInTheDocument();
    expect(screen.getByText('Save')).toBeInTheDocument();
  });

  test('loads saved data when available', async () => {
    const mockSavedData = {
      companyInfo: { name: 'Test Company', address: '123 Test St', purpTras: ['option1'] },
      personalInfo: { name: 'John Doe', age: 30 },
      dynamicFields: [{ value: 'Dynamic 1' }],
    };

    useGetApplicationQuery.mockImplementation(() => ({
      data: mockSavedData,
      isLoading: false,
      refetch: jest.fn(),
    }));

    render(<RegistrationForm />);

    await waitFor(() => {
      expect(screen.getByPlaceholderText('Company Name')).toHaveValue('Test Company');
      expect(screen.getByPlaceholderText('Company Address')).toHaveValue('123 Test St');
      expect(screen.getByPlaceholderText('Personal Name')).toHaveValue('John Doe');
      expect(screen.getByPlaceholderText('Age')).toHaveValue('30');
      expect(screen.getByPlaceholderText('Dynamic Field 1')).toHaveValue('Dynamic 1');
    });
  });

  test('adds dynamic field when button is clicked', async () => {
    render(<RegistrationForm />);

    const addButton = screen.getByText('Add Dynamic Field');
    fireEvent.click(addButton);

    expect(screen.getByPlaceholderText('Dynamic Field 1')).toBeInTheDocument();
  });

  test('submits form data correctly', async () => {
    const mockRefetch = jest.fn();
    useGetApplicationQuery.mockImplementation(() => ({
      data: null,
      isLoading: false,
      refetch: mockRefetch,
    }));

    const consoleSpy = jest.spyOn(console, 'log').mockImplementation();

    render(<RegistrationForm />);

    await userEvent.type(screen.getByPlaceholderText('Company Name'), 'New Company');
    await userEvent.type(screen.getByPlaceholderText('Company Address'), '456 New St');
    await userEvent.type(screen.getByPlaceholderText('Personal Name'), 'Jane Smith');
    await userEvent.type(screen.getByPlaceholderText('Age'), '25');

    const saveButton = screen.getByText('Save');
    fireEvent.click(saveButton);

    await waitFor(() => {
      expect(consoleSpy).toHaveBeenCalledWith(
        'Saved data:',
        expect.objectContaining({
          companyInfo: { name: 'New Company', address: '456 New St', purpTras: [] },
          personalInfo: { name: 'Jane Smith', age: 25 },
          dynamicFields: [],
        })
      );
      expect(mockRefetch).toHaveBeenCalled();
    });

    consoleSpy.mockRestore();
  });

  test('handles loading state', () => {
    useGetApplicationQuery.mockImplementation(() => ({
      data: null,
      isLoading: true,
      refetch: jest.fn(),
    }));

    render(<RegistrationForm />);

    expect(screen.getByText('Loading...')).toBeInTheDocument();
  });
});

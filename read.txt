tsx
// src/hooks/useCachedUserDetails.ts

import { useEffect, useState } from 'react';
import { UserDetails } from '../models/User';
import { fetchUserDetails } from '../repositories/usersRepository';

export function useCachedUserDetails(userId: number): [UserDetails | null, () => void] {
  const [userDetails, setUserDetails] = useState<UserDetails | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  const refreshUserDetails = async () => {
    setIsLoading(true);
    try {
      const fetchedUserDetails = await fetchUserDetails(userId);
      setUserDetails(fetchedUserDetails);
    } catch (error) {
      setError(error.message);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    refreshUserDetails();
  }, []);

  return [userDetails, refreshUserDetails];
}

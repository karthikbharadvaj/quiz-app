tsx
// src/hooks/useCachedUserDetail.ts

import { useEffect, useState } from 'react';
import { User } from '../models/User';
import { fetchUserDetails } from '../repositories/usersRepository';

export function useCachedUserDetail(userId: number): [User | null, () => void] {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  const refreshUserDetail = async () => {
    setIsLoading(true);
    try {
      const userDetails = await fetchUserDetails(userId);
      setUser(userDetails);
    } catch (error) {
      setError(error.message);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    refreshUserDetail();
  }, []);

  return [user, refreshUserDetail];
}

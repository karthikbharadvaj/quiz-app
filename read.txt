const App: React.FC = () => {
  const { data: users, isLoading: isUsersLoading, error: usersError } = useGetUsersQuery();
  const [selectedUser, setSelectedUser] = useState<number | null>(null);
  const { data: userDetails, isLoading: isUserDetailsLoading, error: userDetailsError } = useGetUserByIdQuery(selectedUser || 0);

  const handleUserSelect = (userId: number) => {
    setSelectedUser(userId === selectedUser ? null : userId);
  };

  return (
    <Provider store={store}>
      <div className="app">
        <div className="user-cards">
          {isUsersLoading ? (
            <p>Loading...</p>
          ) : usersError ? (
            <p>Error: {usersError.message}</p>
          ) : (
            users && users.map((user) => (
              <UserCard
                key={user.id}
                user={user}
                isSelected={selectedUser === user.id}
                onSelect={() => handleUserSelect(user.id)}
              />
            ))
          )}
        </div>
        {isUserDetailsLoading ? (
          <p>Loading user details...</p>
        ) : userDetailsError ? (
          <p>Error: {userDetailsError.message}</p>
        ) : (
          <UserDetail user={userDetails} />
        )}
      </div>
    </Provider>
  );
};

export default App;

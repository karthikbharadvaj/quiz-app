/simple-chat-app
  /src
    /server
      server.ts
    /client
      client.ts
    index.html
  package.json
  tsconfig.json

server.ts
// src/server/server.ts
import * as express from 'express';
import * as http from 'http';
import * as WebSocket from 'ws';

const app = express();
const server = http.createServer(app);
const wss = new WebSocket.Server({ server });

wss.on('connection', (ws: WebSocket) => {
  ws.on('message', (message: string) => {
    // Broadcast the message to all connected clients
    wss.clients.forEach((client) => {
      if (client !== ws && client.readyState === WebSocket.OPEN) {
        client.send(message);
      }
    });
  });
});

// Serve HTML file for the simple chat client
app.get('/', (req, res) => {
  res.sendFile(__dirname + '/../index.html');
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});

--client.ts
// src/client/client.ts
// src/client/client.ts
const socket = new WebSocket('ws://localhost:3000');

socket.addEventListener('message', (event) => {
  const chatMessages = document.getElementById('chatMessages')!;
  const li = document.createElement('li');
  li.textContent = event.data;
  chatMessages.appendChild(li);
});

function sendMessage() {
  const messageInput = document.getElementById('messageInput') as HTMLInputElement;
  const message = messageInput.value;
  socket.send(message);
  messageInput.value = '';
}


--index.html
<!-- index.html -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Simple Chat App</title>
</head>
<body>
  <input type="text" id="messageInput" placeholder="Type your message">
  <button onclick="sendMessage()">Send</button>
  <ul id="chatMessages"></ul>

  <script src="./dist/client.js"></script>
</body>
</html>

--package.json
{
  "scripts": {
    "start:server": "ts-node src/server/server.ts",
    "start:client": "tsc --watch --outDir dist/client && concurrently \"tsc -w\" \"http-server\"",
    "start": "concurrently \"npm run start:server\" \"npm run start:client\""
  }
}

--tsconfig
{
  "compilerOptions": {
    "target": "es6",
    "module": "commonjs",
    "strict": true,
    "esModuleInterop": true
  }
}

npm start


To modify the given frontend code to integrate the backend delete functionality using the controller we previously created, we'll do the following:

Plan

1. Add Controller Integration: Use the IdentificationDataController in the frontend to invoke the backend delete functionality when the "やり直す" (Yarinaosu) button is clicked.


2. Handle User Feedback: Show a loading indicator during the operation and provide success or error feedback.


3. Router Integration: Use a router to handle navigation back to the "申込TOP画面" (/new-bank/apply/home) after the deletion.




---

Updated Frontend Code

1. Add Controller and Integration

Here is the updated NewBankApplyIdentityConfirmationApplicant component:

import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { identificationDataController } from '../controllers/identificationDataController'; // Controller for backend operations
import { useReferenceNumber } from '../hooks/useReferenceNumber'; // Hook to fetch reference number
import LayoutNewBank from '../components/LayoutNewBank';
import Loading from '../components/Loading';
import NotificationBox from '../components/NotificationBox';
import Modal from '../components/Modal';
import ModalDetails from '../components/ModalDetails';
import Button from '../components/Button';
import Text from '../components/Text';
import HeadingSubpage from '../components/HeadingSubpage';
import Icon from '../components/Icon';

export const NewBankApplyIdentityConfirmationApplicant: React.FC = () => {
  const spBreakpoint = true; // Assuming responsiveness logic is implemented elsewhere
  const navigate = useNavigate();
  const { referenceNumber } = useReferenceNumber(); // Custom hook to get reference number

  const [isCannotBeUpdated, setIsCannotBeUpdated] = useState(false);
  const [isVerified, setIsVerified] = useState(true);
  const [isLoading, setIsLoading] = useState(false);
  const [isNotRepresentative, setIsNotRepresentative] = useState(false);
  const [isResendDialogOpened, setIsResendDialogOpened] = useState(false);

  // Toggle resend dialog
  const handleResendDialogClick = () => {
    setIsResendDialogOpened(!isResendDialogOpened);
  };

  // Handle the delete operation
  const handleDelete = async () => {
    if (!referenceNumber) {
      console.error('Reference number is missing');
      return;
    }

    setIsLoading(true); // Show loading spinner

    try {
      // Call the delete function from the controller
      await identificationDataController.deleteIdentificationData(
        referenceNumber,
        'REPRESENTATIVE', // Assuming REP for this example, adjust dynamically if needed
        localStorage.getItem('userUid') || '' // Get user UID from local storage
      );

      // Show success message
      alert('本人確認情報が削除されました。');
      setIsVerified(false); // Update UI state
      setIsResendDialogOpened(false); // Close modal
    } catch (error: any) {
      console.error('Error deleting identification data:', error.message);
      alert('エラーが発生しました。もう一度お試しください。');
    } finally {
      setIsLoading(false); // Hide loading spinner
    }
  };

  return (
    <LayoutNewBank isLoggedIn>
      <Loading isLoading={isLoading} />
      <HeadingSubpage modifier="sticky" onClick={() => navigate('/new-bank/apply/home')} title="STEP2 本人確認" />
      <NotificationBox>
        {isVerified && (
          <div className="verified-box">
            <p>本人確認完了</p>
            <Button type="button" modifiers="secondary" onClick={handleResendDialogClick} inactive={isCannotBeUpdated}>
              やり直す
            </Button>
          </div>
        )}
      </NotificationBox>

      {/* Resend Confirmation Dialog */}
      <Modal modifier="dialog" opened={isResendDialogOpened}>
        <Text size="small" align="center" color="gray">
          スマートフォンアプリでのご本人確認を再度行っていただく必要があります。
          <br />
          本当にやり直しますか?
        </Text>
        <ModalDetails>
          <Button onClick={handleResendDialogClick} modifiers="text-gray">
            キャンセル
          </Button>
          <Button onClick={handleDelete} modifiers="text-green">
            やり直す
          </Button>
        </ModalDetails>
      </Modal>
    </LayoutNewBank>
  );
};


---

Explanation

1. Controller Integration:

The identificationDataController.deleteIdentificationData method is called when the user clicks the "やり直す" button in the modal.

It sends the DELETE request to the backend, passing the referenceNumber, userType, and userUid.



2. State Management:

isLoading: Displays a spinner while the deletion is in progress.

isResendDialogOpened: Controls the modal's visibility.

isVerified: Updates the UI to reflect that the data has been deleted.



3. User Feedback:

Success: Displays an alert to confirm the deletion and updates the UI state.

Error: Displays an alert with the error message if the deletion fails.



4. Router Integration:

The useNavigate hook is used to navigate back to the "申込TOP画面" (/new-bank/apply/home) when needed.





---

Backend Interaction

The deleteIdentificationData function in the identificationDataController handles the actual API interaction. This ensures a clean separation of concerns between the component and the backend logic.


---

Advantages of the Modified Frontend

Controller-Based Design:

Encapsulates backend logic in a reusable and testable controller.


Improved UX:

Shows loading indicators and provides clear success/error messages.


Maintainable:

Clean separation of responsibilities and state management.



This updated frontend integrates seamlessly with the backend delete functionality while keeping the UI responsive and user-friendly.

